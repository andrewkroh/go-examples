// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package schema

import (
	"context"
	"database/sql"
)

const insertBuildManifest = `-- name: InsertBuildManifest :exec
INSERT INTO build_manifests (manifest_dir_name, ecs_reference, ecs_import_mappings)
VALUES (?, ?, ?)
`

type InsertBuildManifestParams struct {
	ManifestDirName   string
	EcsReference      sql.NullString
	EcsImportMappings sql.NullBool
}

func (q *Queries) InsertBuildManifest(ctx context.Context, arg InsertBuildManifestParams) error {
	_, err := q.db.ExecContext(ctx, insertBuildManifest, arg.ManifestDirName, arg.EcsReference, arg.EcsImportMappings)
	return err
}

const insertChangelog = `-- name: InsertChangelog :exec
INSERT INTO changelog (manifest_dir_name, version, description, type, link)
VALUES (?, ?, ?, ?, ?)
`

type InsertChangelogParams struct {
	ManifestDirName string
	Version         sql.NullString
	Description     sql.NullString
	Type            sql.NullString
	Link            sql.NullString
}

func (q *Queries) InsertChangelog(ctx context.Context, arg InsertChangelogParams) error {
	_, err := q.db.ExecContext(ctx, insertChangelog,
		arg.ManifestDirName,
		arg.Version,
		arg.Description,
		arg.Type,
		arg.Link,
	)
	return err
}

const insertDataStream = `-- name: InsertDataStream :exec
INSERT INTO data_streams (manifest_dir_name, data_stream_name, dataset, dataset_is_prefix, ilm_policy, release, title, type)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertDataStreamParams struct {
	ManifestDirName string
	DataStreamName  string
	Dataset         sql.NullString
	DatasetIsPrefix sql.NullBool
	IlmPolicy       sql.NullString
	Release         sql.NullString
	Title           sql.NullString
	Type            sql.NullString
}

func (q *Queries) InsertDataStream(ctx context.Context, arg InsertDataStreamParams) error {
	_, err := q.db.ExecContext(ctx, insertDataStream,
		arg.ManifestDirName,
		arg.DataStreamName,
		arg.Dataset,
		arg.DatasetIsPrefix,
		arg.IlmPolicy,
		arg.Release,
		arg.Title,
		arg.Type,
	)
	return err
}

const insertIngestPipeline = `-- name: InsertIngestPipeline :exec
INSERT INTO ingest_pipelines (manifest_dir_name, data_stream_name, pipeline_name, description, version)
VALUES (?, ?, ?, ?, ?)
`

type InsertIngestPipelineParams struct {
	ManifestDirName string
	DataStreamName  string
	PipelineName    string
	Description     sql.NullString
	Version         sql.NullInt64
}

func (q *Queries) InsertIngestPipeline(ctx context.Context, arg InsertIngestPipelineParams) error {
	_, err := q.db.ExecContext(ctx, insertIngestPipeline,
		arg.ManifestDirName,
		arg.DataStreamName,
		arg.PipelineName,
		arg.Description,
		arg.Version,
	)
	return err
}

const insertManifest = `-- name: InsertManifest :exec
INSERT INTO manifests (dir_name, name, title, version, release, description, type, format_version, license, kibana_version, elastic_subscription, source_license, owner_github, owner_type)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertManifestParams struct {
	DirName             string
	Name                sql.NullString
	Title               sql.NullString
	Version             sql.NullString
	Release             sql.NullString
	Description         sql.NullString
	Type                sql.NullString
	FormatVersion       sql.NullString
	License             sql.NullString
	KibanaVersion       sql.NullString
	ElasticSubscription sql.NullString
	SourceLicense       sql.NullString
	OwnerGithub         sql.NullString
	OwnerType           sql.NullString
}

func (q *Queries) InsertManifest(ctx context.Context, arg InsertManifestParams) error {
	_, err := q.db.ExecContext(ctx, insertManifest,
		arg.DirName,
		arg.Name,
		arg.Title,
		arg.Version,
		arg.Release,
		arg.Description,
		arg.Type,
		arg.FormatVersion,
		arg.License,
		arg.KibanaVersion,
		arg.ElasticSubscription,
		arg.SourceLicense,
		arg.OwnerGithub,
		arg.OwnerType,
	)
	return err
}

const insertManifestCategory = `-- name: InsertManifestCategory :exec
INSERT INTO manifest_categories (manifest_dir_name, category)
VALUES (?, ?)
`

type InsertManifestCategoryParams struct {
	ManifestDirName sql.NullString
	Category        sql.NullString
}

func (q *Queries) InsertManifestCategory(ctx context.Context, arg InsertManifestCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestCategory, arg.ManifestDirName, arg.Category)
	return err
}

const insertManifestIcon = `-- name: InsertManifestIcon :exec
INSERT INTO manifest_icons (manifest_dir_name, src, title, size, type, dark_mode)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertManifestIconParams struct {
	ManifestDirName sql.NullString
	Src             sql.NullString
	Title           sql.NullString
	Size            sql.NullString
	Type            sql.NullString
	DarkMode        sql.NullBool
}

func (q *Queries) InsertManifestIcon(ctx context.Context, arg InsertManifestIconParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestIcon,
		arg.ManifestDirName,
		arg.Src,
		arg.Title,
		arg.Size,
		arg.Type,
		arg.DarkMode,
	)
	return err
}

const insertManifestPolicyTemplate = `-- name: InsertManifestPolicyTemplate :exec
INSERT INTO manifest_policy_templates (manifest_dir_name, name, title, description)
VALUES (?, ?, ?, ?)
`

type InsertManifestPolicyTemplateParams struct {
	ManifestDirName sql.NullString
	Name            sql.NullString
	Title           sql.NullString
	Description     sql.NullString
}

func (q *Queries) InsertManifestPolicyTemplate(ctx context.Context, arg InsertManifestPolicyTemplateParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplate,
		arg.ManifestDirName,
		arg.Name,
		arg.Title,
		arg.Description,
	)
	return err
}

const insertManifestPolicyTemplateCategory = `-- name: InsertManifestPolicyTemplateCategory :exec
INSERT INTO manifest_policy_template_categories (manifest_dir_name, policy_template_name, category)
VALUES (?, ?, ?)
`

type InsertManifestPolicyTemplateCategoryParams struct {
	ManifestDirName    sql.NullString
	PolicyTemplateName sql.NullString
	Category           sql.NullString
}

func (q *Queries) InsertManifestPolicyTemplateCategory(ctx context.Context, arg InsertManifestPolicyTemplateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplateCategory, arg.ManifestDirName, arg.PolicyTemplateName, arg.Category)
	return err
}

const insertManifestPolicyTemplateDataStream = `-- name: InsertManifestPolicyTemplateDataStream :exec
INSERT INTO manifest_policy_template_data_streams (manifest_dir_name, policy_template_name, data_stream)
VALUES (?, ?, ?)
`

type InsertManifestPolicyTemplateDataStreamParams struct {
	ManifestDirName    sql.NullString
	PolicyTemplateName sql.NullString
	DataStream         sql.NullString
}

func (q *Queries) InsertManifestPolicyTemplateDataStream(ctx context.Context, arg InsertManifestPolicyTemplateDataStreamParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplateDataStream, arg.ManifestDirName, arg.PolicyTemplateName, arg.DataStream)
	return err
}

const insertManifestPolicyTemplateIcon = `-- name: InsertManifestPolicyTemplateIcon :exec
INSERT INTO manifest_policy_template_icons (manifest_dir_name, policy_template_name, src, title, size, type, dark_mode)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertManifestPolicyTemplateIconParams struct {
	ManifestDirName    sql.NullString
	PolicyTemplateName sql.NullString
	Src                sql.NullString
	Title              sql.NullString
	Size               sql.NullString
	Type               sql.NullString
	DarkMode           sql.NullBool
}

func (q *Queries) InsertManifestPolicyTemplateIcon(ctx context.Context, arg InsertManifestPolicyTemplateIconParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplateIcon,
		arg.ManifestDirName,
		arg.PolicyTemplateName,
		arg.Src,
		arg.Title,
		arg.Size,
		arg.Type,
		arg.DarkMode,
	)
	return err
}

const insertManifestPolicyTemplateInput = `-- name: InsertManifestPolicyTemplateInput :exec
INSERT INTO manifest_policy_template_inputs (manifest_dir_name, policy_template_name, type, title, description, input_group, template_path, multi)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertManifestPolicyTemplateInputParams struct {
	ManifestDirName    sql.NullString
	PolicyTemplateName sql.NullString
	Type               sql.NullString
	Title              sql.NullString
	Description        sql.NullString
	InputGroup         sql.NullString
	TemplatePath       sql.NullString
	Multi              sql.NullBool
}

func (q *Queries) InsertManifestPolicyTemplateInput(ctx context.Context, arg InsertManifestPolicyTemplateInputParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplateInput,
		arg.ManifestDirName,
		arg.PolicyTemplateName,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.InputGroup,
		arg.TemplatePath,
		arg.Multi,
	)
	return err
}

const insertManifestPolicyTemplateInputVar = `-- name: InsertManifestPolicyTemplateInputVar :exec
INSERT INTO manifest_policy_template_input_vars (manifest_dir_name, policy_template_name, input_title, name, default_value, description, type, title, multi, required, secret, show_user)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertManifestPolicyTemplateInputVarParams struct {
	ManifestDirName    sql.NullString
	PolicyTemplateName sql.NullString
	InputTitle         sql.NullString
	Name               sql.NullString
	DefaultValue       sql.NullString
	Description        sql.NullString
	Type               sql.NullString
	Title              sql.NullString
	Multi              sql.NullBool
	Required           sql.NullBool
	Secret             sql.NullBool
	ShowUser           sql.NullBool
}

func (q *Queries) InsertManifestPolicyTemplateInputVar(ctx context.Context, arg InsertManifestPolicyTemplateInputVarParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestPolicyTemplateInputVar,
		arg.ManifestDirName,
		arg.PolicyTemplateName,
		arg.InputTitle,
		arg.Name,
		arg.DefaultValue,
		arg.Description,
		arg.Type,
		arg.Title,
		arg.Multi,
		arg.Required,
		arg.Secret,
		arg.ShowUser,
	)
	return err
}

const insertManifestScreenshot = `-- name: InsertManifestScreenshot :exec
INSERT INTO manifest_screenshots (manifest_dir_name, src, title, size, type)
VALUES (?, ?, ?, ?, ?)
`

type InsertManifestScreenshotParams struct {
	ManifestDirName sql.NullString
	Src             sql.NullString
	Title           sql.NullString
	Size            sql.NullString
	Type            sql.NullString
}

func (q *Queries) InsertManifestScreenshot(ctx context.Context, arg InsertManifestScreenshotParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestScreenshot,
		arg.ManifestDirName,
		arg.Src,
		arg.Title,
		arg.Size,
		arg.Type,
	)
	return err
}

const insertManifestVar = `-- name: InsertManifestVar :exec
INSERT INTO manifest_vars (manifest_dir_name, name, default_value, description, type, title, multi, required, secret, show_user)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertManifestVarParams struct {
	ManifestDirName sql.NullString
	Name            sql.NullString
	DefaultValue    sql.NullString
	Description     sql.NullString
	Type            sql.NullString
	Title           sql.NullString
	Multi           sql.NullBool
	Required        sql.NullBool
	Secret          sql.NullBool
	ShowUser        sql.NullBool
}

func (q *Queries) InsertManifestVar(ctx context.Context, arg InsertManifestVarParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestVar,
		arg.ManifestDirName,
		arg.Name,
		arg.DefaultValue,
		arg.Description,
		arg.Type,
		arg.Title,
		arg.Multi,
		arg.Required,
		arg.Secret,
		arg.ShowUser,
	)
	return err
}

const insertManifestVarOption = `-- name: InsertManifestVarOption :exec
INSERT INTO manifest_var_options (manifest_dir_name, var_name, value, text)
VALUES (?, ?, ?, ?)
`

type InsertManifestVarOptionParams struct {
	ManifestDirName sql.NullString
	VarName         sql.NullString
	Value           sql.NullString
	Text            sql.NullString
}

func (q *Queries) InsertManifestVarOption(ctx context.Context, arg InsertManifestVarOptionParams) error {
	_, err := q.db.ExecContext(ctx, insertManifestVarOption,
		arg.ManifestDirName,
		arg.VarName,
		arg.Value,
		arg.Text,
	)
	return err
}

const insertProcessor = `-- name: InsertProcessor :exec
INSERT INTO processors (manifest_dir_name, data_stream_name, pipeline_name, processor_order, type, attributes, on_failure)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertProcessorParams struct {
	ManifestDirName string
	DataStreamName  string
	PipelineName    sql.NullString
	ProcessorOrder  sql.NullInt64
	Type            sql.NullString
	Attributes      interface{}
	OnFailure       sql.NullBool
}

func (q *Queries) InsertProcessor(ctx context.Context, arg InsertProcessorParams) error {
	_, err := q.db.ExecContext(ctx, insertProcessor,
		arg.ManifestDirName,
		arg.DataStreamName,
		arg.PipelineName,
		arg.ProcessorOrder,
		arg.Type,
		arg.Attributes,
		arg.OnFailure,
	)
	return err
}

const insertStream = `-- name: InsertStream :exec
INSERT INTO streams (manifest_dir_name, data_stream_name, title, input, description, template_path, enabled)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertStreamParams struct {
	ManifestDirName string
	DataStreamName  string
	Title           sql.NullString
	Input           sql.NullString
	Description     sql.NullString
	TemplatePath    sql.NullString
	Enabled         sql.NullBool
}

func (q *Queries) InsertStream(ctx context.Context, arg InsertStreamParams) error {
	_, err := q.db.ExecContext(ctx, insertStream,
		arg.ManifestDirName,
		arg.DataStreamName,
		arg.Title,
		arg.Input,
		arg.Description,
		arg.TemplatePath,
		arg.Enabled,
	)
	return err
}
